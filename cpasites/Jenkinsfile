pipeline {
    agent {
        kubernetes {
            label 'JenKubeDev'
            defaultContainer 'jnlp'
            yaml """
apiVersion: v1
kind: Pod
metadata:
  name: slave
  labels:
    name: slave
spec:
  activeDeadlineSeconds: 600
  nodeSelector:
    kubernetes.io/hostname: ${NODE}
  containers:
  - name: jnlp
    image: harbor.mgcorp.co/devops/ihemingway-jenkins-slave-w-docker:latest
    tty: true
    SecurityContext: privileged
    volumeMounts:
    - mountPath: /var/run/docker.sock
      name: docksock
  volumes:
  - name: docksock
    hostPath:
      path: /var/run/docker.sock
"""
        }
    }
    environment {
        PRODUCT = "cpasites"
        CODE_URL = "ssh://git@stash.mgcorp.co:7999/cpa/cpasites.git"
        MANIFEST_URL = "ssh://git@stash.mgcorp.co:7999/lt/deployment-manifests.git"
        DEPLOYCONFIG = "deployconfig.yaml"
        VAULT_ADDR = "https://mtl-devops-vault.mgcorp.co:8200"
        TEAMS_HOOK = "https://outlook.office.com/webhook/ea64b24e-111b-4b31-b1c4-ed67ce8c9ef4@8901d9c6-8b0c-4459-8f7a-df56f23ef9f9/JenkinsCI/24f71ab16f7f4f63a08b76b45c5ab4e0/acc9e43c-a995-47e2-b550-5a5aa2568437"
        NODE = "${params.NODE}"
        BRANCH = "${params.BRANCH}"
        ENVIRONMENT = "${params.ENVIRONMENT}"
    }
    stages {
        stage('Clean Workspace, Pull Repos') {
            steps {
                office365ConnectorSend color: '05b222',
                    message: "Started build. Branch: ${BRANCH} :: Environment: ${ENVIRONMENT} :: Repo: ${GIT_URL} :: Node: ${NODE}",
                    webhookUrl: "${TEAMS_HOOK}"
                checkout(
                    [$class: 'GitSCM',
                    branches: [[name: "${BRANCH}"]],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [[$class: 'CloneOption', depth: 1, noTags: true, reference: '', shallow: true]],
                    submoduleCfg: [],
                    userRemoteConfigs: [[credentialsId: 'StashKey', url: "${GIT_URL}"]]
                    ]
                )
            }
        }
        stage('Build') {
            steps {
                sh '''
                    echo '##########  CONTAINER STATS  #############'
                    echo
                    java -version
                    echo
                    echo '##########################################' 

                    ### BUILD SPECIFIC ###

                    bash ./build.sh

                    ### END BUILD SPECIFIC ###

                    echo '### DONE! ###'
                '''
            }
        }
        stage('Deploy and Archive') {
            stage('Deploy') {
                steps {
                    sh '''
                        echo '##########  CONTAINER STATS  #############'
                        echo
                        java -version
                        git clone https://i_hemingway@stash.mgcorp.co/scm/~i_hemingway/mgdeploy.git
                        pip3 install --upgrade ./mgdeploy
                        rm -rf mgdeploy .git
                        echo
                        echo '##########################################'
                        #export VAULT_ADDR=https://mtl-devops-vault.mgcorp.co:8200
                    '''
                    withCredentials([string(credentialsId: '222f1d34-e4fc-49f6-a86d-4ada2286906c', variable: 'VAULT_TOKEN')]) {
                        sh '''
                        mgdeploy -e ${ENVIRONMENT} -c ${DEPLOYCONFIG}
                        ''' 
                    }
                }
            }
        }
    }
    post {
        success {
            office365ConnectorSend color: '7CFC00',
                message: "Success! Branch: ${BRANCH} :: Environment: ${ENVIRONMENT} :: Repo: ${GIT_URL} :: Node: ${NODE}",
                webhookUrl: "${TEAMS_HOOK}"
        }
        failure {
            office365ConnectorSend color: 'FF0000',
                message: "FAILED! Branch: ${BRANCH} :: Environment: ${ENVIRONMENT} :: Repo: ${GIT_URL} :: Node: ${NODE}",
                webhookUrl: "${TEAMS_HOOK}"
        }
    }
}

