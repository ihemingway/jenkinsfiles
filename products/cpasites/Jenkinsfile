def PRODUCT = 'cpasites'
def CODE_URL = "ssh://git@stash.mgcorp.co:7999/cpa/cpasites.git"

pipeline {
    agent {
        kubernetes {
            label 'slave'
            namespace 'jenkins'
            defaultContainer 'jnlp'
            yaml """
apiVersion: v1
kind: Pod
metadata:
  name: slave
  labels:
    name: slave
spec:
  activeDeadlineSeconds: 600
  nodeSelector:
    kubernetes.io/hostname: ${NODE}
  containers:
  - name: jnlp
    image: harbor.mgcorp.co/devops/ihemingway-jenkins-slave-w-docker:latest
    tty: true
    SecurityContext: privileged
    volumeMounts:
    - mountPath: /var/run/docker.sock
      name: docksock
  volumes:
  - name: docksock
    hostPath:
      path: /var/run/docker.sock
"""
        }
    }
    environment {
        CODE_WS = "/home/jenkins/${PRODUCT}"
        NODE = "${params.NODE}"
        BRANCH = "${params.BRANCH}"
        ENVIRONMENT = "${params.ENVIRONMENT}"
    }
    stages {
        stage('Notify Teams, Pull Repos') {
            parallel{
                stage('Notify Teams') {
                    steps{
                        office365ConnectorSend color: '05b222',
                            message: "Started build. Branch: ${BRANCH} :: Environment: ${ENVIRONMENT} :: Repo: ${CODE_URL} :: Node: ${NODE}",
                            webhookUrl: "${TEAMS_HOOK}"
                    }
                }
                stage('Pull Product Code') {
                    steps {
                        ws(CODE_WS) {
                            checkout(
                                [$class: 'GitSCM',
                                branches: [[name: "${BRANCH}"]],
                                doGenerateSubmoduleConfigurations: false,
                                extensions: [[$class: 'CloneOption', depth: 1, noTags: true, reference: '', shallow: true]],
                                submoduleCfg: [],
                                userRemoteConfigs: [[credentialsId: 'StashKey', url: "${CODE_URL}"]]
                                ]
                            )
                        }
                    }
                }
                stage('Pull Manifest Code') {
                    steps {
                        ws(MANIFEST_WS) {
                            checkout(
                                [$class: 'GitSCM',
                                branches: [[name: "*/master"]],
                                doGenerateSubmoduleConfigurations: false,
                                extensions: [[$class: 'CloneOption', depth: 1, noTags: true, reference: '', shallow: true]],
                                submoduleCfg: [],
                                userRemoteConfigs: [[credentialsId: 'StashKey', url: "${MANIFEST_URL}"]]
                                ]
                            )
                        }
                    }
                }
            }
        }
        stage('Build') {
            steps {
                ws(CODE_WS) {
                    sh '''
                        echo '##########  CONTAINER STATS  #############'
                        echo
                        java -version
                        echo
                        echo '##########################################' 

                        ### BUILD SPECIFIC ###

                        bash ./build.sh

                        ### END BUILD SPECIFIC ###

                        echo '### DONE! ###'
                    '''
                }
            }
        }
        stage('Deploy') {
            when {
                environment name: 'DEPLOY', value: 'true'
            }
            steps {
                ws(CODE_WS) {
                    sh '''
                        echo '##########  CONTAINER STATS  #############'
                        echo
                        git clone https://stash.mgcorp.co/scm/lt/mgdeploy.git
                        pip3 install --upgrade ./mgdeploy
                        rm -rf mgdeploy .git
                        echo
                        echo '##########################################'
                    '''
                    withCredentials([string(credentialsId: '222f1d34-e4fc-49f6-a86d-4ada2286906c', variable: 'VAULT_TOKEN')]) {
                        sh '''
                            mgdeploy -e ${ENVIRONMENT} -c ${$MANIFEST_WS}/${PRODUCT}/${DEPLOYCONFIG}
                        ''' 
                    }
                }
            }
        }
    }
    post {
        success {
            office365ConnectorSend color: '7CFC00',
                message: "Success! Branch: ${BRANCH} :: Environment: ${ENVIRONMENT} :: Repo: ${CODE_URL} :: Node: ${NODE}",
                webhookUrl: "${TEAMS_HOOK}"
        }
        failure {
            office365ConnectorSend color: 'FF0000',
                message: "FAILED! Branch: ${BRANCH} :: Environment: ${ENVIRONMENT} :: Repo: ${CODE_URL} :: Node: ${NODE}",
                webhookUrl: "${TEAMS_HOOK}"
        }
    }
}